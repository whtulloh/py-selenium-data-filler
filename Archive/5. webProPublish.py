# Generated by Selenium IDE
import os
import pytest
import time
import json
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException

class WebProPublish():
  def setupMethod(self):
    # get parent directory
    runTest.workDir = os.getcwd()
    # read config.ini
    path = self.workDir + "\Config"
    self.config = configparser.ConfigParser()
    self.config.read(os.path.join(path, 'config.ini'))

  def tearUpMethod(self):
    service = Service(self.workDir + '\Bin\chromedriver.exe')
    self.driver = webdriver.Chrome(service = service)
    self.driver.maximize_window()
    self.vars = {}
  
  def tearDownMethod(self):
    self.driver.quit()
  
  def webProPublish(self):
    webpro_username = self.config['WEBPRO']['username']
    webpro_password = self.config['WEBPRO']['password']
    webpro_url = self.config['WEBPRO']['webProUrl']
    wait = self.config['WEBPRO']['timewait']
    
    self.driver.get(webpro_url)
    self.driver.find_element(By.ID, "maintainer").click()
    self.driver.find_element(By.ID, "maintainer").send_keys(webpro_username)
    self.driver.find_element(By.ID, "pw").click()
    self.driver.find_element(By.ID, "pw").send_keys(webpro_password)
    self.driver.find_element(By.NAME, "bv:act_OK").click()

    element = self.driver.find_element(By.ID, "menu_item_entries")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    
    self.driver.find_element(By.CSS_SELECTOR, "#menu_item_entries > span").click()
    self.driver.find_element(By.CSS_SELECTOR, ".unselected:nth-child(7) span").click()

    categories = self.config['WEBPRO']['contentCategory'].split(',')
    for category in categories:
      if category != "Glossary":
        select = Select(WebDriverWait(self.driver, wait).until(expected_conditions.element_to_be_clickable((By.ID, "Category-items"))))
        select.select_by_visible_text(category)

        keyChild = ""
        try:
          keyChild = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td > a > span")
        except NoSuchElementException:
          keyChild = ""
          print("Skipped: "+category)

        while (keyChild != ""):
          self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td > a > span").click()
          self.driver.find_element(By.NAME, "bv:act_approve").click()

          keyCheck = ""
          try:
            keyCheck = self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td > a > span")
          except NoSuchElementException:
            keyCheck == ""

          if (keyCheck == ""):
            break
  
if __name__ == '__main__':
  print("Hi python")
  runTest = WebProPublish()
  runTest.setupMethod()
  runTest.tearUpMethod()
  runTest.webProPublish()
  # runTest.tearDownMethod()