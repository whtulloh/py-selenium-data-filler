# Generated by Selenium IDE
import os
import pytest
import time
import json
import configparser
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import Select


class WebProUploadContent():
  def setupMethod(self):
    # get parent directory
    runTest.workDir = os.getcwd()
    # read config.ini
    path = self.workDir + "\Config"
    self.config = configparser.ConfigParser()
    self.config.read(os.path.join(path, 'config.ini'))

  def tearUpMethod(self):
    service = Service(self.workDir + '\Bin\chromedriver.exe')
    self.driver = webdriver.Chrome(service = service)
    self.driver.maximize_window()
    self.vars = {}
  
  def tearDownMethod(self):
    self.driver.quit()
  
  def webProUploadContent(self):
    webpro_username = self.config['WEBPRO']['username']
    webpro_password = self.config['WEBPRO']['password']
    webpro_url = self.config['WEBPRO']['webProUrl']
    
    self.driver.get(webpro_url)
    self.driver.find_element(By.ID, "maintainer").click()
    self.driver.find_element(By.ID, "maintainer").send_keys(webpro_username)
    self.driver.find_element(By.ID, "pw").click()
    self.driver.find_element(By.ID, "pw").send_keys(webpro_password)
    self.driver.find_element(By.NAME, "bv:act_OK").click()

    element = self.driver.find_element(By.ID, "menu_item_downloads")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, "#menu_item_downloads > span").click()

    contentDir = self.workDir + "\Content\Csv"
    categories = self.config['WEBPRO']['contentCategory'].split(',')
    subCategories = self.config['WEBPRO']['contentSubCategory'].split(',')

    for category in categories:
      if category == "Alerts":
        self.bulkContentUpload(category, subCategories[0], "alerts", contentDir) # Alert
      elif category == "Glossary":
        self.bulkContentUpload(category, subCategories[1], "gloss", contentDir) # Glossary Term
      else:
        if (category != "Insurance") & (category != "Savings"):
          subCategory = subCategories[2]
          fileName = (subCategory + "-" + category.replace(" ", "-")).lower()
          self.bulkContentUpload(category, subCategory, fileName, contentDir) # Article
          
        subCategory = subCategories[3]
        fileName = (subCategory + "-" + category.replace(" ", "-")).lower()
        self.bulkContentUpload(category, subCategory, fileName, contentDir) # FAQ


  def bulkContentUpload(self, category, subCategory, fileName, contentDir):
    wait = self.config['WEBPRO']['timewait']

    self.driver.find_element(By.LINK_TEXT, "Content Upload").click()
    select = Select(WebDriverWait(self.driver, wait).until(expected_conditions.element_to_be_clickable((By.ID, "Category-items"))))
    select.select_by_visible_text(category)
    select = Select(WebDriverWait(self.driver, wait).until(expected_conditions.element_to_be_clickable((By.ID, "ULSchemas-items"))))
    select.select_by_visible_text(subCategory)
    self.driver.find_element(By.XPATH, "//input[@id=\'ULFileName\']").send_keys(contentDir + "/" + fileName + ".csv")
    self.driver.find_element(By.NAME, "bv:act_upload").click()

if __name__ == '__main__':
  print("Hi python")
  runTest = WebProUploadContent()
  runTest.setupMethod()
  runTest.tearUpMethod()
  runTest.webProUploadContent()
  runTest.tearDownMethod()